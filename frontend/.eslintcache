[{"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\index.js":"1","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\store.js":"2","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\App.js":"3","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\reducers\\cartReducers.js":"4","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\reducers\\orderReducers.js":"5","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\reducers\\productReducers.js":"6","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\Home.js":"7","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\reducers\\userReducers.js":"8","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\Payment.js":"9","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\product\\ProductDetails.js":"10","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\Shipping.js":"11","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\OrderSuccess.js":"12","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\Cart.js":"13","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\ConfirmOrder.js":"14","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\layout\\Footer.js":"15","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\layout\\Header.js":"16","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\order\\ListOrders.js":"17","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\order\\OrderDetails.js":"18","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\Login.js":"19","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\Profile.js":"20","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\NewPassword.js":"21","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\ForgotPassword.js":"22","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\UpdatePassword.js":"23","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\Register.js":"24","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\OrdersList.js":"25","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\UpdateProfile.js":"26","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\Dashboard.js":"27","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\ProductsList.js":"28","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\UsersList.js":"29","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\NewProduct.js":"30","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\UpdateUser.js":"31","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\UpdateProduct.js":"32","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\ProcessOrder.js":"33","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\ProductReviews.js":"34","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\actions\\userActions.js":"35","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\route\\ProtectedRoute.js":"36","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\layout\\Loader.js":"37","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\layout\\MetaData.js":"38","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\actions\\orderActions.js":"39","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\actions\\productActions.js":"40","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\actions\\cartActions.js":"41","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\CheckoutSteps.js":"42","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\constants\\cartConstants.js":"43","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\constants\\orderConstants.js":"44","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\product\\Product.js":"45","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\constants\\productConstants.js":"46","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\constants\\userConstants.js":"47","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\Sidebar.js":"48","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\review\\ListReviews.js":"49","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\layout\\Search.js":"50"},{"size":589,"mtime":1711817748538,"results":"51","hashOfConfig":"52"},{"size":1735,"mtime":1711817748576,"results":"53","hashOfConfig":"52"},{"size":5074,"mtime":1711817748466,"results":"54","hashOfConfig":"52"},{"size":1108,"mtime":1711817750666,"results":"55","hashOfConfig":"52"},{"size":4377,"mtime":1711817750709,"results":"56","hashOfConfig":"52"},{"size":6963,"mtime":1711817750750,"results":"57","hashOfConfig":"52"},{"size":8416,"mtime":1711817748872,"results":"58","hashOfConfig":"52"},{"size":6374,"mtime":1711817750791,"results":"59","hashOfConfig":"52"},{"size":5600,"mtime":1711817749656,"results":"60","hashOfConfig":"52"},{"size":8450,"mtime":1711817750078,"results":"61","hashOfConfig":"52"},{"size":4761,"mtime":1711817749692,"results":"62","hashOfConfig":"52"},{"size":732,"mtime":1711817749617,"results":"63","hashOfConfig":"52"},{"size":4609,"mtime":1711817749475,"results":"64","hashOfConfig":"52"},{"size":3751,"mtime":1711817749569,"results":"65","hashOfConfig":"52"},{"size":326,"mtime":1711822454942,"results":"66","hashOfConfig":"52"},{"size":3228,"mtime":1711817749773,"results":"67","hashOfConfig":"52"},{"size":2711,"mtime":1711817749946,"results":"68","hashOfConfig":"52"},{"size":3787,"mtime":1711817749991,"results":"69","hashOfConfig":"52"},{"size":3476,"mtime":1711817750245,"results":"70","hashOfConfig":"52"},{"size":1958,"mtime":1711817750324,"results":"71","hashOfConfig":"52"},{"size":2924,"mtime":1711817750286,"results":"72","hashOfConfig":"52"},{"size":2198,"mtime":1711817750208,"results":"73","hashOfConfig":"52"},{"size":2922,"mtime":1711817750403,"results":"74","hashOfConfig":"52"},{"size":5630,"mtime":1711817750365,"results":"75","hashOfConfig":"52"},{"size":3831,"mtime":1711817749025,"results":"76","hashOfConfig":"52"},{"size":5120,"mtime":1711817750446,"results":"77","hashOfConfig":"52"},{"size":5771,"mtime":1711817748913,"results":"78","hashOfConfig":"52"},{"size":3790,"mtime":1711817749146,"results":"79","hashOfConfig":"52"},{"size":3542,"mtime":1711817749420,"results":"80","hashOfConfig":"52"},{"size":8701,"mtime":1711817748952,"results":"81","hashOfConfig":"52"},{"size":4270,"mtime":1711817749373,"results":"82","hashOfConfig":"52"},{"size":9231,"mtime":1711823027598,"results":"83","hashOfConfig":"52"},{"size":6283,"mtime":1711817749066,"results":"84","hashOfConfig":"52"},{"size":5062,"mtime":1711817749105,"results":"85","hashOfConfig":"52"},{"size":9567,"mtime":1711822882137,"results":"86","hashOfConfig":"52"},{"size":920,"mtime":1711817750166,"results":"87","hashOfConfig":"52"},{"size":134,"mtime":1711817749810,"results":"88","hashOfConfig":"52"},{"size":229,"mtime":1711817749846,"results":"89","hashOfConfig":"52"},{"size":4706,"mtime":1711822791746,"results":"90","hashOfConfig":"52"},{"size":7388,"mtime":1711822847220,"results":"91","hashOfConfig":"52"},{"size":1345,"mtime":1711817748626,"results":"92","hashOfConfig":"52"},{"size":1843,"mtime":1711817749524,"results":"93","hashOfConfig":"52"},{"size":147,"mtime":1711817750493,"results":"94","hashOfConfig":"52"},{"size":1161,"mtime":1711817750535,"results":"95","hashOfConfig":"52"},{"size":1207,"mtime":1711817750039,"results":"96","hashOfConfig":"52"},{"size":1906,"mtime":1711817750581,"results":"97","hashOfConfig":"52"},{"size":2215,"mtime":1711817750620,"results":"98","hashOfConfig":"52"},{"size":1637,"mtime":1711817749184,"results":"99","hashOfConfig":"52"},{"size":738,"mtime":1711817750122,"results":"100","hashOfConfig":"52"},{"size":1014,"mtime":1711817749900,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"589gft",{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\index.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\store.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\App.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\reducers\\cartReducers.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\reducers\\orderReducers.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\reducers\\productReducers.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\Home.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\reducers\\userReducers.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\Payment.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\product\\ProductDetails.js",["213","214","215","216","217"],"\nimport React, {Fragment, useEffect, useState} from 'react';\nimport {Carousel} from 'react-bootstrap';\nimport Loader from \"../layout/Loader\";\nimport MetaData from \"../layout/MetaData\";\nimport { useAlert } from 'react-alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {getProductDetails,clearErrors, newReview } from '../../actions/productActions'; \n\nimport {addItemToCart } from '../../actions/cartActions';\n\nimport {  NEW_REVIEW_RESET } from \"../../constants/productConstants\"; \nimport ListReviews from '../review/ListReviews';\nconst ProductDetails = ({match})=>{\n\n    const [quantity, setQuantity] = useState(1);\n    const [rating, setRating] = useState(0);\n    const [comment, setComment] = useState('');\n\n    const dispatch = useDispatch();\n    const alert = useAlert(); \n    const {loading, error, product} = useSelector(state=>state.productDetails) \n\n    const { user } = useSelector( state => state.auth) \n    const { error: reviewError, success } = useSelector(state => state.newReview ) \n\n    useEffect(async()=>{ \n        dispatch(getProductDetails(match.params.id))\n\n        if(error){\n            alert.error(error);\n            dispatch(clearErrors())\n        }\n        if(reviewError){\n            alert.error(reviewError);\n            dispatch(clearErrors())\n        }\n\n        if(success){\n            alert.success('Review posted successfully');\n            dispatch({ type: NEW_REVIEW_RESET })\n        }\n    },[dispatch, alert, error, match.params.id, success])\n\n\n    const increaseQty = ()=>{\n        const count = document.querySelector('.count')\n\n        if(count.valueAsNumber >= product.stock) return;\n\n        const qty = count.valueAsNumber + 1;\n        setQuantity(qty);\n    }\n    const decreaseQty = ()=>{\n        const count = document.querySelector('.count')\n\n        if(count.valueAsNumber <= 1) return;\n\n        const qty = count.valueAsNumber - 1;\n        setQuantity(qty);\n    }\n\n    function setUserRatings() {\n        const stars = document.querySelectorAll('.star');\n\n        stars.forEach((star, index) => {\n            star.starValue = index + 1;\n\n            ['click', 'mouseover', 'mouseout'].forEach(function (e) {\n                star.addEventListener(e, showRatings);\n            })\n        })\n\n        function showRatings(e){\n            stars.forEach((star, index)=>{\n                if(e.type == 'click'){\n                    if(index<this.starValue){\n                        star.classList.add('orange');\n                        setRating(this.starValue);\n                    }\n                    else{\n                        star.classList.remove('orange');\n                    }\n                }\n                if(e.type == 'mouseover'){\n                    if(index<this.starValue){\n                        star.classList.add('yellow');\n                    }\n                    else{\n                        star.classList.remove('yellow');\n                    }\n                }\n                if(e.type == 'mouseout'){\n                    star.classList.remove('yellow');\n                    \n                }\n            })\n        }\n    }\n\n    const addToCart = () =>{\n        dispatch(addItemToCart(match.params.id, quantity));\n        alert.success('Item Added to Cart')\n    }\n\n    const reviewHandler = () =>{\n        const formData = new FormData();\n        formData.set('rating', rating);\n        formData.set('comment', comment);\n        formData.set('productId', match.params.id);\n\n         dispatch(newReview(formData));\n        \n    }\n    \n\n\n    return(\n        <Fragment>\n        \n        {loading?<Loader/>:(\n            <Fragment>\n            <MetaData title={product.name}/>\n                <div className=\"row f-flex justify-content-around\">\n        <div className=\"col-12 col-lg-5 img-fluid\" id=\"product_image\">\n            <Carousel pause='hover'>\n                {product.images && product.images.map(image => (\n                    <Carousel.Item key={image.public_id}>\n                        <img className='d-block w-100' src={image.url} alt={product.title} />\n                    </Carousel.Item>\n                ))}\n            </Carousel>\n        </div>\n\n        <div className=\"col-12 col-lg-5 mt-5\">\n            <h3>{product.name}</h3>\n            <p id=\"product_id\">Product # {product._id}</p>\n\n            <hr/>\n\n            <div className=\"rating-outer\">\n                <div className=\"rating-inner\" style={{width:`${(product.ratings/5)* 100}%`}}></div>\n            </div>\n            <span id=\"no_of_reviews\">({product.numOfReviews} Reviews)</span>\n\n            <hr/>\n\n            <p id=\"product_price\">&#8377;{product.price}</p>\n            <div className=\"stockCounter d-inline\">\n                <span className=\"btn btn-danger minus\" onClick={decreaseQty}>-</span>\n\n                <input type=\"number\" className=\"form-control count d-inline\" value={quantity } readOnly />\n\n                <span className=\"btn btn-primary plus\" onClick={increaseQty}>+</span>\n            </div>\n             <button type=\"button\" id=\"cart_btn\" className=\"btn btn-primary d-inline ml-4\" disabled={product.stock === 0} onClick={addToCart}>Add to Cart</button>\n\n            <hr/>\n\n            <p>Status: <span id=\"stock_status\" className={product.stock>0?'greenColor':'redColor'}>{product.stock > 0 ? 'InStock': 'Out od Stock'}</span></p>\n\n            <hr/>\n\n            <h4 className=\"mt-2\">Description:</h4>\n            <p>{product.description}</p>\n            <hr/>\n            <p id=\"product_seller mb-3\">Sold by: <strong>{product.seller}</strong></p>\n            \n            { user ? <button id=\"review_btn\" type=\"button\" className=\"btn btn-primary mt-4\" data-toggle=\"modal\" data-target=\"#ratingModal\" onClick={setUserRatings}>\n                        Submit Your Review\n                    </button>\n                :\n                    <div className='alert alert-danger mt-5' type='alert'>\n                        Login to post your review. \n                    </div>\n            }\n            \n            \n            <div className=\"row mt-2 mb-5\">\n                <div className=\"rating w-50\">\n\n                    <div className=\"modal fade\" id=\"ratingModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"ratingModalLabel\" aria-hidden=\"true\">\n                        <div className=\"modal-dialog\" role=\"document\">\n                            <div className=\"modal-content\">\n                                <div className=\"modal-header\">\n                                    <h5 className=\"modal-title\" id=\"ratingModalLabel\">Submit Review</h5>\n                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                        <span aria-hidden=\"true\">&times;</span>\n                                    </button>\n                                </div>\n                                <div className=\"modal-body\">\n\n                                    <ul className=\"stars\" >\n                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\n                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\n                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\n                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\n                                        <li className=\"star\"><i className=\"fa fa-star\"></i></li>\n                                    </ul>\n\n                                    <textarea name=\"review\" id=\"review\" className=\"form-control mt-3\" value={comment} onChange={(e)=>setComment(e.target.value)}>\n\n                                    </textarea>\n\n                                    <button className=\"btn my-3 float-right review-btn px-4 text-white\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={reviewHandler } >Submit</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>   \n        </div>\n        </div>\n        {product.reviews && product.reviews.length > 0 && (\n            product.reviews.map((review,index) =>{\n                return(\n                    <ListReviews key={index} reviews={product.reviews} />\n                )\n            })\n        )}\n\n            </Fragment>\n        )}\n        </Fragment>\n        \n    )\n}\n\nexport default ProductDetails;","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\Shipping.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\OrderSuccess.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\Cart.js",["218"],"import React, { Fragment } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport MetaData from '../layout/MetaData'\n\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addItemToCart, removeItemFromCart } from '../../actions/cartActions'\n\nconst Cart = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    const { cartItems } = useSelector(state => state.cart)\n\n    const removeCartItemHandler = (id) => {\n        dispatch(removeItemFromCart(id))\n    }\n\n    const increaseQty = (id, quantity, stock) => {\n        const newQty = quantity + 1;\n\n        if (newQty > stock) return;\n\n        dispatch(addItemToCart(id, newQty))\n    }\n\n    const decreaseQty = (id, quantity) => {\n\n        const newQty = quantity - 1;\n\n        if (newQty <= 0) return;\n\n        dispatch(addItemToCart(id, newQty))\n\n    }\n\n    const checkoutHandler = () => {\n        history.push('/login?redirect=shipping')\n    }\n\n    return (\n        <Fragment>\n            <MetaData title={'Your Cart'} />\n            {cartItems.length === 0 ? <h2 className=\"mt-5\">Your Cart is Empty</h2> : (\n                <Fragment>\n                    <h2 className=\"mt-5\">Your Cart: <b>{cartItems.length} items</b></h2>\n\n                    <div className=\"row d-flex justify-content-between\">\n                        <div className=\"col-12 col-lg-8\">\n\n                            {cartItems.map(item => (\n                                <Fragment>\n                                    <hr />\n\n                                    <div className=\"cart-item\" key={item.product}>\n                                        <div className=\"row\">\n                                            <div className=\"col-4 col-lg-3\">\n                                                <img src={item.image} alt=\"Laptop\" height=\"90\" width=\"115\" />\n                                            </div>\n\n                                            <div className=\"col-5 col-lg-3\">\n                                                <Link to={`/products/${item.product}`}>{item.name}</Link>\n                                            </div>\n\n\n                                            <div className=\"col-4 col-lg-2 mt-4 mt-lg-0\">\n                                                <p id=\"card_item_price\">₹ {item.price}</p>\n                                            </div>\n\n                                            <div className=\"col-4 col-lg-3 mt-4 mt-lg-0\">\n                                                <div className=\"stockCounter d-inline\">\n                                                    <span className=\"btn btn-danger minus\" onClick={() => decreaseQty(item.product, item.quantity)}>-</span>\n\n                                                    <input type=\"number\" className=\"form-control count d-inline\" value={item.quantity} readOnly />\n\n                                                    <span className=\"btn btn-primary plus\" onClick={() => increaseQty(item.product, item.quantity, item.stock)}>+</span>\n                                                </div>\n                                            </div>\n\n                                            <div className=\"col-4 col-lg-1 mt-4 mt-lg-0\">\n                                                <i id=\"delete_cart_item\" className=\"fa fa-trash btn btn-danger\" onClick={() => removeCartItemHandler(item.product)} ></i>\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                    <hr />\n                                </Fragment>\n                            ))}\n\n                        </div>\n\n                        <div className=\"col-12 col-lg-3 my-4\">\n                            <div id=\"order_summary\">\n                                <h4>Order Summary</h4>\n                                <hr />\n                                <p>Subtotal:  <span className=\"order-summary-values\">{cartItems.reduce((acc, item) => (acc + Number(item.quantity)), 0)} (Units)</span></p>\n                                <p>Est. total: <span className=\"order-summary-values\">₹ {cartItems.reduce((acc, item) => acc + item.quantity * item.price, 0).toFixed(2)}</span></p>\n\n                                <hr />\n                                <button id=\"checkout_btn\" className=\"btn btn-primary btn-block\" onClick={checkoutHandler}>Check out</button>\n                            </div>\n                        </div>\n                    </div>\n                </Fragment>\n            )}\n        </Fragment>\n    )\n}\n\nexport default Cart","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\ConfirmOrder.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\layout\\Footer.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\layout\\Header.js",["219"],"\nimport React, { Fragment } from 'react'\nimport { Route, Link } from 'react-router-dom'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useAlert } from 'react-alert'\nimport { logout } from '../../actions/userActions'\n\nimport Search from './Search'\n\nimport '../../App.css'\n\nconst Header = () => {\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { user, loading } = useSelector(state => state.auth)\n    const { cartItems } = useSelector(state => state.cart)\n\n    const logoutHandler = () => {\n        dispatch(logout());\n        alert.success('Logged out successfully.')\n    }\n\n    return (\n        <Fragment>\n            <nav className=\"navbar row\">\n                <div className=\"col-12 col-md-3\">\n                    <div className=\"navbar-brand\">\n                        <Link to=\"/\">\n                            <img src=\"/images/shopit_logo.png\" />\n                        </Link>\n                    </div>\n                </div>\n\n                <div className=\"col-12 col-md-6 mt-2 mt-md-0\">\n                    <Route render={({ history }) => <Search history={history} />} />\n                </div>\n\n                <div className=\"col-12 col-md-3 mt-4 mt-md-0 text-center\">\n                    <Link to=\"/cart\" style={{ textDecoration: 'none' }} >\n                        <span id=\"cart\" className=\"ml-3\">Cart</span>\n                        <span className=\"ml-1\" id=\"cart_count\">{cartItems.length}</span>\n                    </Link>\n\n                    {user ? (\n                        <div className=\"ml-4 dropdown d-inline\">\n                            <Link to=\"#!\" className=\"btn dropdown-toggle text-white mr-4\" type=\"button\" id=\"dropDownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\n                                <figure className=\"avatar avatar-nav\">\n                                    <img\n                                        src={user.avatar && user.avatar.url}\n                                        alt={user && user.name}\n                                        className=\"rounded-circle\"\n                                    />\n                                </figure>\n                                <span>{user && user.name}</span>\n                            </Link>\n\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dropDownMenuButton\">\n\n                                {user && user.role === 'admin' && (\n                                    <Link className=\"dropdown-item\" to=\"/dashboard\">Dashboard</Link>\n                                )}\n                                <Link className=\"dropdown-item\" to=\"/orders/me\">Orders</Link>\n                                <Link className=\"dropdown-item\" to=\"/me\">Profile</Link>\n                                <Link className=\"dropdown-item text-danger\" to=\"/\" onClick={logoutHandler}>\n                                    Logout\n                                </Link>\n\n                            </div>\n\n\n                        </div>\n\n                    ) : !loading && <Link to=\"/login\" className=\"btn ml-4\" id=\"login_btn\">Login</Link>}\n\n\n                </div>\n            </nav>\n        </Fragment>\n    )\n}\n\nexport default Header","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\order\\ListOrders.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\order\\OrderDetails.js",["220"],"\n\nimport React, { Fragment, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport MetaData from '../layout/MetaData'\nimport Loader from '../layout/Loader'\n\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getOrderDetails, clearErrors } from '../../actions/orderActions'\n\nconst OrderDetails = ({ match }) => {\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { loading, error, order = {} } = useSelector(state => state.orderDetails)\n    const { shippingInfo, orderItems, paymentInfo, user, totalPrice, orderStatus } = order\n\n    useEffect(() => {\n        dispatch(getOrderDetails(match.params.id));\n\n        if (error) {\n            alert.error(error);\n            dispatch(clearErrors())\n        }\n    }, [dispatch, alert, error, match.params.id])\n\n    const shippingDetails = shippingInfo && `${shippingInfo.address}, ${shippingInfo.city}, ${shippingInfo.postalCode}, ${shippingInfo.country}`\n\n    const isPaid = paymentInfo && paymentInfo.status === 'succeeded' ? true : false\n\n    return (\n        <Fragment>\n            <MetaData title={'Order Details'} />\n\n            {loading ? <Loader /> : (\n                <Fragment>\n                    <div className=\"row d-flex justify-content-between\">\n                        <div className=\"col-12 col-lg-8 mt-5 order-details\">\n\n                            <h1 className=\"my-5\">Order # {order._id}</h1>\n\n                            <h4 className=\"mb-4\">Shipping Info</h4>\n                            <p><b>Name:</b> {user && user.name}</p>\n                            <p><b>Phone:</b> {shippingInfo && shippingInfo.phoneNo}</p>\n                            <p className=\"mb-4\"><b>Address:</b>{shippingDetails}</p>\n                            <p><b>Amount:</b> ₹ {totalPrice}</p>\n\n                            <hr />\n\n                            <h4 className=\"my-4\">Payment</h4>\n                            <p className={isPaid ? \"greenColor\" : \"redColor\"}><b>{isPaid ? \"PAID\" : \"NOT PAID\"}</b></p>\n\n\n                            <h4 className=\"my-4\">Order Status:</h4>\n                            <p className={order.orderStatus && String(order.orderStatus).includes('Delivered') ? \"greenColor\" : \"redColor\"} ><b>{orderStatus}</b></p>\n\n\n                            <h4 className=\"my-4\">Order Items:</h4>\n\n                            <hr />\n                            <div className=\"cart-item my-1\">\n                                {order.orderItem && order.orderItem.map(item => (\n                                    <div key={item.product} className=\"row my-5\">\n                                        <div className=\"col-4 col-lg-2\">\n                                            <img src={item.image} alt={item.name} height=\"45\" width=\"65\" />\n                                        </div>\n\n                                        <div className=\"col-5 col-lg-5\">\n                                            <Link to={`/products/${item.product}`}>{item.name}</Link>\n                                        </div>\n\n\n                                        <div className=\"col-4 col-lg-2 mt-4 mt-lg-0\">\n                                            <p>₹ {item.price}</p>\n                                        </div>\n\n                                        <div className=\"col-4 col-lg-3 mt-4 mt-lg-0\">\n                                            <p>{item.quantity} Piece(s)</p>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                            <hr />\n                        </div>\n                    </div>\n                </Fragment>\n            )}\n\n        </Fragment>\n    )\n}\n\nexport default OrderDetails","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\Login.js",["221"],"\nimport React, { Fragment, useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport Loader from '../layout/Loader'\nimport MetaData from '../layout/MetaData'\n\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { login, clearErrors } from '../../actions/userActions'\n\nconst Login = ({ history, location }) => {\n\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { isAuthenticated, error, loading } = useSelector(state => state.auth);\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    useEffect(() => {\n\n        if (isAuthenticated) {\n            history.push(redirect)\n        }\n\n        if (error) {\n            \n            if(error === 'Invalid Email or Password'){\n                alert.error(error);\n            }\n            \n            dispatch(clearErrors());\n        }\n\n    }, [dispatch, alert, isAuthenticated, error, history])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        dispatch(login(email, password))\n    }\n\n    return (\n        <Fragment>\n            {loading ? <Loader /> : (\n                <Fragment>\n                    <MetaData title={'Login'} />\n\n                    <div className=\"row wrapper\">\n                        <div className=\"col-10 col-lg-5\">\n                            <form className=\"shadow-lg\" onSubmit={submitHandler}>\n                                <h1 className=\"mb-3\">Login</h1>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email_field\">Email</label>\n                                    <input\n                                        type=\"email\"\n                                        id=\"email_field\"\n                                        className=\"form-control\"\n                                        value={email}\n                                        onChange={(e) => setEmail(e.target.value)}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password_field\">Password</label>\n                                    <input\n                                        type=\"password\"\n                                        id=\"password_field\"\n                                        className=\"form-control\"\n                                        value={password}\n                                        onChange={(e) => setPassword(e.target.value)}\n                                    />\n                                </div>\n\n                                <Link to=\"/password/forgot\" className=\"float-right mb-4\">Forgot Password?</Link>\n\n                                <button\n                                    id=\"login_button\"\n                                    type=\"submit\"\n                                    className=\"btn btn-block py-3\"\n                                >\n                                    LOGIN\n                                </button>\n\n                                <Link to=\"/register\" className=\"float-right mt-3\">New User?</Link>\n                            </form>\n                        </div>\n                    </div>\n\n\n                </Fragment>\n            )}\n        </Fragment>\n    )\n}\n\nexport default Login","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\Profile.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\NewPassword.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\ForgotPassword.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\UpdatePassword.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\Register.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\OrdersList.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\user\\UpdateProfile.js",["222"],"\nimport React, { Fragment, useState, useEffect } from 'react'\n\nimport MetaData from '../layout/MetaData'\n\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateProfile, loadUser, clearErrors } from '../../actions/userActions'\nimport { UPDATE_PROFILE_RESET } from '../../constants/userConstants'\n\nconst UpdateProfile = ({ history }) => {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [avatar, setAvatar] = useState('')\n    const [avatarPreview, setAvatarPreview] = useState('/images/default_avatar.jpg')\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { user } = useSelector(state => state.auth);\n    const { error, isUpdated, loading } = useSelector(state => state.user)\n\n    useEffect(() => {\n\n        if (user) {\n            setName(user.name);\n            setEmail(user.email);\n            setAvatarPreview(user.avatar.url)\n        }\n\n        if (error) {\n            alert.error(error);\n            dispatch(clearErrors());\n        }\n\n        if (isUpdated) {\n            alert.success('User updated successfully')\n            dispatch(loadUser());\n\n            history.push('/me')\n\n            dispatch({\n                type: UPDATE_PROFILE_RESET\n            })\n        }\n\n    }, [dispatch, alert, error, history, isUpdated])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('name', name);\n        formData.set('email', email);\n        formData.set('avatar', avatar);\n\n        dispatch(updateProfile(formData))\n    }\n\n    const onChange = e => {\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            if (reader.readyState === 2) {\n                setAvatarPreview(reader.result)\n                setAvatar(reader.result)\n            }\n        }\n\n        reader.readAsDataURL(e.target.files[0])\n\n    }\n    return (\n        <Fragment>\n            <MetaData title={'Update Profile'} />\n\n            <div className=\"row wrapper\">\n                <div className=\"col-10 col-lg-5\">\n                    <form className=\"shadow-lg\" onSubmit={submitHandler} encType='multipart/form-data'>\n                        <h1 className=\"mt-2 mb-5\">Update Profile</h1>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Name</label>\n                            <input\n                                type=\"name\"\n                                id=\"name_field\"\n                                className=\"form-control\"\n                                name='name'\n                                value={name}\n                                onChange={(e) => setName(e.target.value)}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Email</label>\n                            <input\n                                type=\"email\"\n                                id=\"email_field\"\n                                className=\"form-control\"\n                                name='email'\n                                value={email}\n                                onChange={(e) => setEmail(e.target.value)}\n                            />\n                        </div>\n\n                        <div className='form-group'>\n                            <label htmlFor='avatar_upload'>Avatar</label>\n                            <div className='d-flex align-items-center'>\n                                <div>\n                                    <figure className='avatar mr-3 item-rtl'>\n                                        <img\n                                            src={avatarPreview}\n                                            className='rounded-circle'\n                                            alt='Avatar Preview'\n                                        />\n                                    </figure>\n                                </div>\n                                <div className='custom-file'>\n                                    <input\n                                        type='file'\n                                        name='avatar'\n                                        className='custom-file-input'\n                                        id='customFile'\n                                        accept='image/*'\n                                        onChange={onChange}\n                                    />\n                                    <label className='custom-file-label' htmlFor='customFile'>\n                                        Choose Avatar\n                                </label>\n                                </div>\n                            </div>\n                        </div>\n\n                        <button type=\"submit\" className=\"btn update-btn btn-block mt-4 mb-3\" disabled={loading ? true : false} >Update</button>\n                    </form>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default UpdateProfile","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\Dashboard.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\ProductsList.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\UsersList.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\NewProduct.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\UpdateUser.js",["223","224"],"import React, { Fragment, useState, useEffect } from 'react'\n\nimport MetaData from '../layout/MetaData';\nimport Sidebar from './Sidebar';\n\nimport { useAlert } from 'react-alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateUser, clearErrors, getUserDetails, loadUser } from '../../actions/userActions';\nimport { UPDATE_USER_RESET } from '../../constants/userConstants';\n\n\nconst UpdateUser = ({history, match}) =>{\n\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [role, setRole] = useState('');\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { error, isUpdated  } = useSelector(state => state.user);\n    const { user } = useSelector(state => state.userDetails);\n\n    const userId = match.params.id;\n\n    useEffect(() => {\n\n        if (user && user._id != userId){\n            dispatch(getUserDetails(userId));\n        } \n        else{\n            setName(user.name);\n            setEmail(user.email);\n            setRole(user.role)\n        }\n\n        if (error) {\n            alert.error(error);\n            dispatch(clearErrors());\n        }\n\n        if (isUpdated) {\n            alert.success('User updated successfully')\n            dispatch(loadUser());\n\n            history.push('/admin/users')\n\n            dispatch({\n                type: UPDATE_USER_RESET\n            })\n        }\n\n    }, [dispatch, alert, error, history, isUpdated])\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.set('name', name);\n        formData.set('email', email);\n        formData.set('role', role);\n\n        dispatch(updateUser(user._id, formData))\n    }\n\n    return(\n        <Fragment>\n            <MetaData title={'Update User'} />\n            <div className=\"row\">\n                <div className=\"col-12 col-md-2\">\n                    <Sidebar />\n                </div>\n\n                <div className=\"col-12 col-md-10\">\n                <div className=\"row wrapper\">\n                <div className=\"col-10 col-lg-5\">\n                    <form className=\"shadow-lg\" onSubmit={submitHandler}>\n                        <h1 className=\"mt-2 mb-5\">Update User</h1>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name_field\">Name</label>\n                            <input \n\t\t\t\t\t\t\t\ttype=\"name\" \n\t\t\t\t\t\t\t\tid=\"name_field\" \n\t\t\t\t\t\t\t\tclassName=\"form-control\"\n                                name='name'\n                                value={name}\n                                onChange={(e)=>setName(e.target.value)}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email_field\">Email</label>\n                            <input\n                                type=\"email\"\n                                id=\"email_field\"\n                                className=\"form-control\"\n                                name='email'\n                                value={email}\n                                onChange={(e)=>setEmail(e.target.value)}\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                                    <label htmlFor=\"role_field\">Role</label>\n\n                                    <select\n                                        id=\"role_field\"\n                                        className=\"form-control\"\n                                        name='role'\n                                        value={role}\n                                        onChange={(e)=> setRole(e.target.value)}\n                                    >\n                                        <option value=\"user\">user</option>\n                                        <option value=\"admin\">admin</option>\n                                    </select>\n                                </div>\n\n                        <button type=\"submit\" className=\"btn update-btn btn-block mt-4 mb-3\" >Update</button>\n                    </form>\n                </div>\n            </div>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\n\nexport default UpdateUser ;\n\n\n\n\n","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\UpdateProduct.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\ProcessOrder.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\ProductReviews.js",["225"],"import React, { Fragment, useState, useEffect } from 'react'\nimport { MDBDataTable } from 'mdbreact'\n\nimport MetaData from '../layout/MetaData'\nimport Loader from '../layout/Loader'\nimport Sidebar from './Sidebar'\n\nimport { useAlert } from 'react-alert'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getProductReviews, deleteReview, clearErrors } from '../../actions/productActions'\nimport { DELETE_REVIEW_RESET } from '../../constants/productConstants'\n\nconst ProductReviews = () => {\n\n    const [productId, setProductId] = useState('')\n\n    const alert = useAlert();\n    const dispatch = useDispatch();\n\n    const { error, reviews } = useSelector(state => state.productReviews);\n    const { isDeleted, error: deleteError } = useSelector(state => state.review)\n\n    useEffect(() => {\n\n        if (error) {\n            alert.error(error);\n            dispatch(clearErrors())\n        }\n\n        if (deleteError) {\n            alert.error(deleteError);\n            dispatch(clearErrors())\n        }\n\n        if (productId !== '') {\n            dispatch(getProductReviews(productId))\n        }\n\n        if (isDeleted) {\n            alert.success('Review deleted successfully');\n            dispatch({ type: DELETE_REVIEW_RESET })\n        }\n\n\n\n    }, [dispatch, alert, error, productId, isDeleted, deleteError])\n\n    const deleteReviewHandler = (id) => {\n        dispatch(deleteReview(id, productId))\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        dispatch(getProductReviews(productId))\n    }\n\n    const setReviews = () => {\n        const data = {\n            columns: [\n                {\n                    label: 'Review ID',\n                    field: 'id',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Rating',\n                    field: 'rating',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Comment',\n                    field: 'comment',\n                    sort: 'asc'\n                },\n                {\n                    label: 'User',\n                    field: 'user',\n                    sort: 'asc'\n                },\n                {\n                    label: 'Actions',\n                    field: 'actions',\n                },\n            ],\n            rows: []\n        }\n\n        reviews.forEach(review => {\n            data.rows.push({\n                id: review._id,\n                rating: review.rating,\n                comment: review.comment,\n                user: review.name,\n\n                actions:\n                    <button className=\"btn btn-danger py-1 px-2 ml-2\" onClick={() => deleteReviewHandler(review._id)}>\n                        <i className=\"fa fa-trash\"></i>\n                    </button>\n            })\n        })\n\n        return data;\n    }\n\n    return (\n        <Fragment>\n            <MetaData title={'Product Reviews'} />\n            <div className=\"row\">\n                <div className=\"col-12 col-md-2\">\n                    <Sidebar />\n                </div>\n\n                <div className=\"col-12 col-md-10\">\n                    <Fragment>\n                        <div className=\"row justify-content-center mt-5\">\n                            <div className=\"col-5\">\n                                <form onSubmit={submitHandler}>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"productId_field\">Enter Product ID</label>\n                                        <input\n                                            type=\"text\"\n                                            id=\"productId_field\"\n                                            className=\"form-control\"\n                                            value={productId}\n                                            onChange={(e) => setProductId(e.target.value)}\n                                        />\n                                    </div>\n\n                                    <button\n                                        id=\"search_button\"\n                                        type=\"submit\"\n                                        className=\"btn btn-primary btn-block py-2\"\n                                    >\n                                        SEARCH\n\t\t\t\t\t\t\t\t    </button>\n                                </ form>\n                            </div>\n\n                        </div>\n\n                        {reviews && reviews.length > 0 ? (\n                            <MDBDataTable\n                                data={setReviews()}\n                                className=\"px-3\"\n                                bordered\n                                striped\n                                hover\n                            />\n                        ) : (\n                                <p className=\"mt-5 text-center\">No Reviews.</p>\n                            )}\n\n\n                    </Fragment>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\nexport default ProductReviews","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\actions\\userActions.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\route\\ProtectedRoute.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\layout\\Loader.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\layout\\MetaData.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\actions\\orderActions.js",["226"],"import axios from 'axios';\n\nimport {\n    CREATE_ORDER_REQUEST,\n    CREATE_ORDER_SUCCESS,\n    CREATE_ORDER_FAIL,\n    MY_ORDERS_REQUEST,\n    MY_ORDERS_SUCCESS,\n    MY_ORDERS_FAIL,\n    ALL_ORDERS_REQUEST,\n    ALL_ORDERS_SUCCESS,\n    ALL_ORDERS_FAIL,\n    UPDATE_ORDER_SUCCESS,\n    UPDATE_ORDER_REQUEST,\n    UPDATE_ORDER_FAIL,\n    DELETE_ORDER_REQUEST,\n    DELETE_ORDER_SUCCESS,\n    DELETE_ORDER_FAIL,\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n    CLEAR_ERRORS\n} from \"../constants/orderConstants\";\n\nexport const createOrder = (order) => async(dispatch, getState) =>{\n    try{\n        dispatch({\n            type: CREATE_ORDER_REQUEST\n        })\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Content-Type': 'application/json',\n                'authorization':`Bearer ${Token}`\n            }\n        }\n\n        const { data } = await axios.post(`${process.env.REACT_APP_PORT}/api/v1/order/new`, order, config)\n        dispatch({\n            type: CREATE_ORDER_SUCCESS,\n            payload:data \n        })\n\n    }\n    catch(error){\n        dispatch({\n            type:CREATE_ORDER_FAIL,\n            payload: error.response.data.errMessage\n        })\n    }\n}\n\n//Get currently logged in user orders\n\nexport const myOrders = () =>async(dispatch)=>{\n    try{\n        dispatch({type: MY_ORDERS_REQUEST});\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Content-Type':'application/json',\n                'authorization':`Bearer ${Token}`\n            }\n        }\n        const { data } = await axios.get(`${process.env.REACT_APP_PORT}/api/v1/orders/me`,config);\n        dispatch({\n             type: MY_ORDERS_SUCCESS,\n            payload: data.order\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: MY_ORDERS_FAIL,\n            payload: error.response\n        })\n    }\n}\n\n//Get order details\n\nexport const getOrderDetails = (id) =>async(dispatch)=>{\n    try{\n        dispatch({type: MY_ORDERS_REQUEST});\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Content-Type':'application/json',\n                'authorization':`Bearer ${Token}`\n            }\n        }\n        const { data } = await axios.get(`${process.env.REACT_APP_PORT}/api/v1/order/${id}`,config);\n        dispatch({\n             type: ORDER_DETAILS_SUCCESS,\n            payload: data.order\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: error.response\n        })\n    }\n}\n\n\n//Get all orders - ADMIN\n\nexport const allOrders = () =>async(dispatch)=>{\n    try{\n        dispatch({type: ALL_ORDERS_REQUEST});\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Content-Type':'application/json',\n                'authorization':`Bearer ${Token}`\n            }\n        }\n        const { data } = await axios.get(`${process.env.REACT_APP_PORT}/api/v1/admin/orders`,config);\n        dispatch({\n             type: ALL_ORDERS_SUCCESS,\n            payload: data\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: ALL_ORDERS_FAIL,\n            payload: error.response\n        })\n    }\n}\n\n// Delete order\nexport const deleteOrder = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: DELETE_ORDER_REQUEST })\n\n        const { data } = await axios.delete(`${process.env.REACT_APP_PORT}/api/v1/admin/order/${id}`)\n\n        dispatch({\n            type: DELETE_ORDER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: DELETE_ORDER_FAIL,\n            payload: error.response.data.errMessage\n        })\n    }\n}\n\n// update order\nexport const updateOrder = (id, orderData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: UPDATE_ORDER_REQUEST })\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'authorization':`Bearer ${Token}`\n\n            }\n        }\n\n        const { data } = await axios.put(`${process.env.REACT_APP_PORT}/api/v1/admin/order/${id}`, orderData, config)\n\n        dispatch({\n            type: UPDATE_ORDER_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n        dispatch({\n            type: UPDATE_ORDER_FAIL,\n            payload: error.response.data.errMessage\n        })\n    }\n}\n\n// clear Errors\n\nexport const clearErrors = ()=> async(dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS,\n    })\n}","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\actions\\productActions.js",["227","228","229"],"import axios from 'axios';\nimport {ALL_PRODUCTS_REQUEST,\n    ALL_PRODUCTS_SUCCESS,\n    ALL_PRODUCTS_FAIL,\n    ADMIN_PRODUCTS_REQUEST,\n    ADMIN_PRODUCTS_SUCCESS,\n    ADMIN_PRODUCTS_FAIL,\n    NEW_PRODUCT_REQUEST,\n    NEW_PRODUCT_SUCCESS,\n    NEW_PRODUCT_FAIL,\n    DELETE_PRODUCT_REQUEST,\n    DELETE_PRODUCT_SUCCESS,\n    DELETE_PRODUCT_FAIL,\n    UPDATE_PRODUCT_REQUEST,\n    UPDATE_PRODUCT_SUCCESS,\n    UPDATE_PRODUCT_FAIL,\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_FAIL,\n    NEW_REVIEW_REQUEST,\n    NEW_REVIEW_SUCCESS,\n    NEW_REVIEW_FAIL,\n    GET_REVIEWS_REQUEST,\n    GET_REVIEWS_SUCCESS,\n    GET_REVIEWS_FAIL,\n    DELETE_REVIEW_REQUEST,\n    DELETE_REVIEW_SUCCESS,\n    DELETE_REVIEW_RESET,\n    DELETE_REVIEW_FAIL,\n    CLEAR_ERRORS\n   } from \"../constants/productConstants\";\n\nexport const getProducts = (keyword = '', currentPage = 1, price, category, rating=0) => async(dispatch)=>{\n    try{\n        dispatch({  type:ALL_PRODUCTS_REQUEST })\n\n        let link = `${process.env.REACT_APP_PORT}/api/v1/products?keyword=${keyword}&page=${currentPage}&price[lte]=${price[1]}&price[gte]=${price[0]}&ratings[gte]=${rating}`;\n\n        if(category){\n            link = `${process.env.REACT_APP_PORT}/api/v1/products?keyword=${keyword}&page=${currentPage}&price[lte]=${price[1]}&price[gte]=${price[0]}&category=${category}&ratings[gte]=${rating}`\n        }\n\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Content-Type':'application/json',\n                'authorization':`Bearer ${Token}`\n            }\n        }\n\n        const {data} = await axios.get(link, config)\n\n        dispatch({\n            type: ALL_PRODUCTS_SUCCESS,\n            payload: data\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: ALL_PRODUCTS_FAIL,\n            payload: error.response.data.errMessage\n        })\n    }\n}\n\n\nexport const newProduct = (productData) => async(dispatch)=>{\n    try{\n        dispatch({  type: NEW_PRODUCT_REQUEST })\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Context-Type':'application/json',\n                'authorization':`Bearer ${Token}`\n\n            }\n        }\n        const {data} = await axios.post(`${process.env.REACT_APP_PORT}/api/v1/admin/product/new`, productData, config)\n\n        dispatch({\n            type: NEW_PRODUCT_SUCCESS,\n            payload: data\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: NEW_PRODUCT_FAIL,\n            payload: error.response.data.errMessage\n        })\n    }\n}\n\n\n\n//Delete product (Admin)\nexport const deleteProduct = (id) => async(dispatch)=>{\n    try{\n        dispatch({  type: DELETE_PRODUCT_REQUEST})\n\n        \n        const {data} = await axios.delete(`${process.env.REACT_APP_PORT}/api/v1/admin/product/${id}`);\n\n        dispatch({\n            type: NEW_REVIEW_SUCCESS,\n            payload: data.success\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: NEW_REVIEW_FAIL,\n            payload: error.response.data.errMessage\n        })\n    }\n}\n\n//Update Product (Admin)\nexport const updateProduct = (id, productData) => async(dispatch)=>{\n    try{\n        dispatch({  type: UPDATE_PRODUCT_REQUEST })\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Context-Type':'application/json',\n                'authorization':`Bearer ${Token}`\n\n            }\n        }\n        const {data} = await axios.put(`${process.env.REACT_APP_PORT}/api/v1/admin/product/${id}`, productData, config)\n\n        dispatch({\n            type: UPDATE_PRODUCT_SUCCESS,\n            payload: data.success\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: UPDATE_PRODUCT_FAIL,\n            payload: error.response.data.errMessage\n        })\n    }\n}\n\n\nexport const getProductDetails = (id) => async(dispatch)=>{\n    try{\n        dispatch({  type: PRODUCT_DETAILS_REQUEST })\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Content-Type':'application/json',\n                'authorization':`Bearer ${Token}`\n            }\n        }\n        const {data} = await axios.get(`${process.env.REACT_APP_PORT}/api/v1/product/${id}`,config)\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n            payload: data.product\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: PRODUCT_DETAILS_FAIL,\n            payload: error.response\n        })\n    }\n}\n\n\n\n\nexport const newReview = (reviewData) => async(dispatch)=>{\n    try{\n        dispatch({  type: NEW_REVIEW_REQUEST })\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Context-Type':'application/json',\n                'authorization':`Bearer ${Token}`\n\n            }\n        }\n        const {data} = await axios.put(`${process.env.REACT_APP_PORT}/api/v1/review`, reviewData, config)\n\n        dispatch({\n            type: NEW_REVIEW_SUCCESS,\n            payload: data.success\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: NEW_REVIEW_FAIL,\n            payload: error.response.data.errMessage\n        })\n    }\n}\n\n\nexport const getAdminProducts = () => async(dispatch)=>{\n    try{\n        dispatch({  type: ADMIN_PRODUCTS_REQUEST })\n\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Content-Type':'application/json',\n                'authorization':`Bearer ${Token}`\n            }\n        }\n        const {data} = await axios.get(`${process.env.REACT_APP_PORT}/api/v1/admin/products`, config)\n\n        dispatch({\n            type: ADMIN_PRODUCTS_SUCCESS,\n            payload: data.products\n        })\n\n    }\n    catch(error){\n        dispatch({\n            type: ADMIN_PRODUCTS_FAIL ,\n            payload: error.response\n        })\n    }\n}\n\n// Get product reviews\nexport const getProductReviews = (id) => async (dispatch) => {\n    try {\n\n        dispatch({ type: GET_REVIEWS_REQUEST })\n        const Token= localStorage.getItem(\"Token\");\n\n        const config = {\n            headers:{\n                'Content-Type':'application/json',\n                'authorization':`Bearer ${Token}`\n            }\n        }\n\n        const { data } = await axios.get(`${process.env.REACT_APP_PORT}/api/v1/reviews?id=${id}`,config)\n\n        dispatch({\n            type: GET_REVIEWS_SUCCESS,\n            payload: data.reviews\n        })\n\n    } catch (error) {\n\n        dispatch({\n            type: GET_REVIEWS_FAIL,\n            payload: error.response.data.errMessage\n        })\n    }\n}\n\n// Delete product review\nexport const deleteReview = (id, productId) => async (dispatch) => {\n    try {\n\n        dispatch({ type: DELETE_REVIEW_REQUEST })\n\n        const { data } = await axios.delete(`${process.env.REACT_APP_PORT}/api/v1/reviews?id=${id}&productId=${productId}`)\n\n        dispatch({\n            type: DELETE_REVIEW_SUCCESS,\n            payload: data.success\n        })\n\n    } catch (error) {\n\n\n        dispatch({\n            type: DELETE_REVIEW_FAIL,\n            payload: error.response.data.errMessage\n        })\n    }\n}\n\n// clear Errors\n\nexport const clearErrors = ()=> async(dispatch) => {\n    dispatch({\n        type: CLEAR_ERRORS,\n    })\n}","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\actions\\cartActions.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\cart\\CheckoutSteps.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\constants\\cartConstants.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\constants\\orderConstants.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\product\\Product.js",["230"],"\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport \"../../App.css\";\nconst Product = ({product, col}) =>{\n    return (\n        <div className={`col-sm-12 col-md-6 col-lg-${col} my-3`}>\n            <div className=\"card p-3 rounded\">\n                <img className=\"card-img-top mx-auto\" src={product.images[0].url} />\n                <div className=\"card-body d-flex flex-column\">\n                    <h5 className=\"card-title\">\n                        <Link to={`/product/${product._id}`}>{product.name}</Link>\n                    </h5>\n                    <div className=\"ratings mt-auto\">\n                        <div className=\"rating-outer\">\n                            <div className=\"rating-inner\" style={{width:`${(product.ratings/5)* 100}%`}}></div>\n                        </div>\n                        <span id=\"no_of_reviews\">({product.numOfReviews} Reviews)</span>\n                    </div>\n                    <p className=\"card-text\">&#8377;{product.price}</p>\n                    <Link to={`/product/${product._id}`} id=\"view_btn\" className=\"btn btn-block\">View Details</Link>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Product;\n","D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\constants\\productConstants.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\constants\\userConstants.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\admin\\Sidebar.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\review\\ListReviews.js",[],"D:\\Projects\\ShopIT-E-Commerce-MERN\\frontend\\src\\components\\layout\\Search.js",[],{"ruleId":"231","severity":1,"message":"232","line":27,"column":15,"nodeType":"233","endLine":43,"endColumn":6},{"ruleId":"231","severity":1,"message":"234","line":43,"column":7,"nodeType":"235","endLine":43,"endColumn":57,"suggestions":"236"},{"ruleId":"237","severity":1,"message":"238","line":76,"column":27,"nodeType":"239","messageId":"240","endLine":76,"endColumn":29},{"ruleId":"237","severity":1,"message":"238","line":85,"column":27,"nodeType":"239","messageId":"240","endLine":85,"endColumn":29},{"ruleId":"237","severity":1,"message":"238","line":93,"column":27,"nodeType":"239","messageId":"240","endLine":93,"endColumn":29},{"ruleId":"241","severity":1,"message":"242","line":6,"column":10,"nodeType":"243","messageId":"244","endLine":6,"endColumn":18},{"ruleId":"245","severity":1,"message":"246","line":31,"column":29,"nodeType":"247","endLine":31,"endColumn":66},{"ruleId":"241","severity":1,"message":"248","line":19,"column":27,"nodeType":"243","messageId":"244","endLine":19,"endColumn":37},{"ruleId":"231","severity":1,"message":"249","line":39,"column":8,"nodeType":"235","endLine":39,"endColumn":58,"suggestions":"250"},{"ruleId":"231","severity":1,"message":"251","line":48,"column":8,"nodeType":"235","endLine":48,"endColumn":52,"suggestions":"252"},{"ruleId":"237","severity":1,"message":"253","line":28,"column":30,"nodeType":"239","messageId":"240","endLine":28,"endColumn":32},{"ruleId":"231","severity":1,"message":"254","line":53,"column":8,"nodeType":"235","endLine":53,"endColumn":52,"suggestions":"255"},{"ruleId":"241","severity":1,"message":"256","line":5,"column":8,"nodeType":"243","messageId":"244","endLine":5,"endColumn":14},{"ruleId":"241","severity":1,"message":"257","line":19,"column":5,"nodeType":"243","messageId":"244","endLine":19,"endColumn":26},{"ruleId":"241","severity":1,"message":"258","line":12,"column":5,"nodeType":"243","messageId":"244","endLine":12,"endColumn":27},{"ruleId":"241","severity":1,"message":"259","line":13,"column":5,"nodeType":"243","messageId":"244","endLine":13,"endColumn":24},{"ruleId":"241","severity":1,"message":"260","line":28,"column":5,"nodeType":"243","messageId":"244","endLine":28,"endColumn":24},{"ruleId":"245","severity":1,"message":"246","line":9,"column":17,"nodeType":"247","endLine":9,"endColumn":85},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'reviewError'. Either include it or remove the dependency array.","ArrayExpression",["261"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'useAlert' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'orderItems' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'redirect'. Either include it or remove the dependency array.",["262"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["263"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'user' and 'userId'. Either include them or remove the dependency array.",["264"],"'Loader' is defined but never used.","'ORDER_DETAILS_REQUEST' is defined but never used.","'DELETE_PRODUCT_SUCCESS' is defined but never used.","'DELETE_PRODUCT_FAIL' is defined but never used.","'DELETE_REVIEW_RESET' is defined but never used.",{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},"Update the dependencies array to be: [dispatch, alert, error, match.params.id, success, reviewError]",{"range":"273","text":"274"},"Update the dependencies array to be: [dispatch, alert, isAuthenticated, error, history, redirect]",{"range":"275","text":"276"},"Update the dependencies array to be: [dispatch, alert, error, history, isUpdated, user]",{"range":"277","text":"278"},"Update the dependencies array to be: [dispatch, alert, error, history, isUpdated, user, userId]",{"range":"279","text":"280"},[1449,1499],"[dispatch, alert, error, match.params.id, success, reviewError]",[1014,1064],"[dispatch, alert, isAuthenticated, error, history, redirect]",[1320,1364],"[dispatch, alert, error, history, isUpdated, user]",[1403,1447],"[dispatch, alert, error, history, isUpdated, user, userId]"]